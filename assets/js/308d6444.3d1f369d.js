"use strict";(self.webpackChunkgrc=self.webpackChunkgrc||[]).push([[4530],{4360:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var l=n(5893),s=n(1151);const r={},t="Building From Scratch",a={id:"hpc-tutorials/installing-hpc-software/building-from-scratch",title:"Building From Scratch",description:"When spack fails, there aren't many options but to build the code from scratch. This is typically an arduous,",source:"@site/docs/02-hpc-tutorials/02-installing-hpc-software/02-building-from-scratch.md",sourceDirName:"02-hpc-tutorials/02-installing-hpc-software",slug:"/hpc-tutorials/installing-hpc-software/building-from-scratch",permalink:"/spcai/docs/hpc-tutorials/installing-hpc-software/building-from-scratch",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Building With Spack",permalink:"/spcai/docs/hpc-tutorials/installing-hpc-software/building-with-spack"},next:{title:"Important Environment Variables",permalink:"/spcai/docs/category/important-environment-variables"}},o={},c=[{value:"Setup",id:"setup",level:2},{value:"Overview of Build Systems",id:"overview-of-build-systems",level:2},{value:"Example: Zlib",id:"example-zlib",level:2},{value:"Download + Decompress",id:"download--decompress",level:3},{value:"Configure",id:"configure",level:3},{value:"Make",id:"make",level:3},{value:"Install",id:"install",level:3}];function d(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.h1,{id:"building-from-scratch",children:"Building From Scratch"}),"\n",(0,l.jsxs)(i.p,{children:["When ",(0,l.jsx)(i.code,{children:"spack"})," fails, there aren't many options but to build the code from scratch. This is typically an arduous,\r\npoorly documented, and often times frustrating process. Here will provide some simple examples of how to build\r\nvarious HPC programs from scratch."]}),"\n",(0,l.jsx)(i.h2,{id:"setup",children:"Setup"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-bash",children:"mkdir ${SCS_TUTORIAL}/2.2.1.scratch\r\ncd ${SCS_TUTORIAL}/2.2.1.scratch\r\nmkdir src\r\nmkdir install\n"})}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"src"}),": will contain the source code of the programs we're building"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"install"}),": will contain the compiled code of the programs"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"overview-of-build-systems",children:"Overview of Build Systems"}),"\n",(0,l.jsx)(i.p,{children:"There are many build systems you may encounter when building from source"}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsx)(i.li,{children:"Autotools"}),"\n",(0,l.jsx)(i.li,{children:"Make"}),"\n",(0,l.jsx)(i.li,{children:"CMake"}),"\n",(0,l.jsx)(i.li,{children:"Ninja"}),"\n",(0,l.jsx)(i.li,{children:"Meson"}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"example-zlib",children:"Example: Zlib"}),"\n",(0,l.jsx)(i.p,{children:"Zlib is foundational to nearly every package in HPC. Zlib is a compression library. Zlib uses Autotools as its build system."}),"\n",(0,l.jsx)(i.h3,{id:"download--decompress",children:"Download + Decompress"}),"\n",(0,l.jsx)(i.p,{children:"First we will download and decompress the zlib package."}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-bash",children:"wget https://www.zlib.net/zlib-1.3.tar.gz\r\ntar -xzf zlib-1.3.tar.gz\n"})}),"\n",(0,l.jsx)(i.h3,{id:"configure",children:"Configure"}),"\n",(0,l.jsx)(i.p,{children:"Next we will configure Zlib to the particular machine."}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-bash",children:"cd zlib-1.2.13\r\n./configure --prefix=${SCS_TUTORIAL}/2.2.1.scratch/install\n"})}),"\n",(0,l.jsx)(i.p,{children:"The output of ./configure is a Makefile."}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.code,{children:"--prefix"})," tells the Autotools configurator where to install compiled code after building. If left unset, this will default to ",(0,l.jsx)(i.code,{children:"/usr"}),"."]}),"\n",(0,l.jsx)(i.p,{children:"To see a full list of configure options, do"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-bash",children:"./configure -h\n"})}),"\n",(0,l.jsx)(i.h3,{id:"make",children:"Make"}),"\n",(0,l.jsx)(i.p,{children:"After running configure, we will use the machine-specific Makefile to actually compile the code. This is done as follows:"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-bash",children:"make -j8\n"})}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.code,{children:"-j"})," indicates the amount of parallelism to use when building the progam. In our case we use 8 threads. Don't use more threads than\r\nyou have cores on your machine."]}),"\n",(0,l.jsx)(i.h3,{id:"install",children:"Install"}),"\n",(0,l.jsx)(i.p,{children:"Lastly, we install using:"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-bash",children:"make install\n"})}),"\n",(0,l.jsx)(i.p,{children:"This will populate the install directory with the compiled data."})]})}function h(e={}){const{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>a,a:()=>t});var l=n(7294);const s={},r=l.createContext(s);function t(e){const i=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(r.Provider,{value:i},e.children)}}}]);